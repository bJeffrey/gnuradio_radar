options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: radar
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: amplitude
  id: variable
  parameters:
    comment: ''
    value: '2.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 12.0]
    rotation: 0
    state: true
- name: bandwidth_khz
  id: variable
  parameters:
    comment: ''
    value: time_bandwidth_product / tau_sec / 1e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 12.0]
    rotation: 0
    state: true
- name: bandwidth_khz_lower_limit
  id: variable
  parameters:
    comment: ''
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 76.0]
    rotation: 0
    state: true
- name: bandwidth_khz_upper_limit
  id: variable
  parameters:
    comment: ''
    value: '6000.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 76.0]
    rotation: 0
    state: true
- name: c
  id: variable
  parameters:
    comment: ''
    value: '299792458'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 12.0]
    rotation: 0
    state: true
- name: distance_to_target_m
  id: variable
  parameters:
    comment: ''
    value: max_unambiguous_range_m / 0.5
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 76.0]
    rotation: 0
    state: true
- name: duty_cycle
  id: variable
  parameters:
    comment: ''
    value: '0.06'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 12.0]
    rotation: 0
    state: true
- name: fc_Hz
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: tab@0:0,0,1,1
    label: Center Frequencies (Hz)
    type: raw
    value: '[5e3,10e3,15e3]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 668.0]
    rotation: 0
    state: disabled
- name: lambda_m
  id: variable
  parameters:
    comment: ''
    value: c / pulse_center_freq_hz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 12.0]
    rotation: 0
    state: true
- name: max_unambiguous_range_m
  id: variable
  parameters:
    comment: ''
    value: c * pri_sec
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 76.0]
    rotation: 0
    state: true
- name: max_unambiguous_vel_mps
  id: variable
  parameters:
    comment: ''
    value: prf_khz  * 1.0e3 * lambda_m / 4.0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 12.0]
    rotation: 0
    state: true
- name: num_pulses_per_cpi
  id: variable
  parameters:
    comment: ''
    value: '18'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 12.0]
    rotation: 0
    state: true
- name: num_samples_during_pulse_silence
  id: variable
  parameters:
    comment: ''
    value: num_samples_per_pulse - num_samples_during_pulse_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 76.0]
    rotation: 0
    state: true
- name: num_samples_during_pulse_tx
  id: variable
  parameters:
    comment: ''
    value: int(num_samples_per_pulse * duty_cycle)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 76.0]
    rotation: 0
    state: true
- name: num_samples_per_pulse
  id: variable
  parameters:
    comment: ''
    value: int(float(samp_rate) / (float(prf_khz) * 1e3))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 12.0]
    rotation: 0
    state: true
- name: prf_khz
  id: variable
  parameters:
    comment: ''
    value: '3.90625'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 12.0]
    rotation: 0
    state: true
- name: pri_sec
  id: variable
  parameters:
    comment: ''
    value: 1/(prf_khz * 1e3)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 76.0]
    rotation: 0
    state: true
- name: pulse_center_freq_hz
  id: variable
  parameters:
    comment: ''
    value: 10.0e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 12.0]
    rotation: 0
    state: true
- name: range_to_target
  id: variable
  parameters:
    comment: ''
    value: '500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 76.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: target_vel_mps
  id: variable
  parameters:
    comment: ''
    value: max_unambiguous_vel_mps / 2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 76.0]
    rotation: 0
    state: true
- name: tau_sec
  id: variable
  parameters:
    comment: ''
    value: pri_sec * duty_cycle
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 76.0]
    rotation: 0
    state: true
- name: time_bandwidth_product
  id: variable
  parameters:
    comment: ''
    value: '10.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 12.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: prf_khz
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SQR_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 644.0]
    rotation: 0
    state: disabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: int(range_to_target / (3e8) * samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 440.0]
    rotation: 0
    state: disabled
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: num_samples_per_pulse
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 548.0]
    rotation: 0
    state: disabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: num_samples_per_pulse*num_pulses_per_cpi
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 152.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: num_samples_per_pulse
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 140.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 684.0]
    rotation: 0
    state: disabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: complex
    vector: signalSource.generate_lfm_pulse(prf_khz, duty_cycle, amplitude, time_bandwidth_product,
      pulse_center_freq_hz, bandwidth_khz_lower_limit, bandwidth_khz_upper_limit,
      bandwidth_khz, num_samples_per_pulse, samp_rate)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 580.0]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 552.0]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_0_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: num_samples_per_pulse
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 152.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0_0_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: num_samples_per_pulse*num_pulses_per_cpi
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 152.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:] =\
      \ input_items[0] * self.example_param\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 684.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    # time-bandwidth product should\
      \ be [75, 10,000] for LFM system\n    def __init__(\n        self,\n       \
      \ prf_khz=3,\n        pri_sec=0.001,\n        duty_cycle=0.06,\n        tau_sec=0.01,\n\
      \        time_bandwidth_product=100,\n        pulse_center_freq_hz=500,\n  \
      \      bandwidth_khz_lower_limit=1,\n        bandwidth_khz_upper_limit=100,\n\
      \        bandwidth_khz=50,\n        num_samples_per_pulse=128,\n        num_samples_during_pulse_tx=100,\n\
      \        num_samples_during_pulse_silence=122,\n        samp_rate=100e3,\n \
      \       t=np.linspace(0, 0.01 , num=100, endpoint=False),\n        amplitude=1.0,\n\
      \        phase_ramp=1.0\n    ):  # only default arguments here\n        \"\"\
      \"arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Linear Frequency Modulation',   # will\
      \ show up in GRC\n            in_sig=[],\n            out_sig=[(np.complex64,1024)]\n\
      \        )\n        # log levels: \n        #   trace:      Developing an algorithm\
      \ and need to log specific values that it calculates\n        #   debug:   \
      \   Used for debugging purposes, and should not be visible under usual usage\n\
      \        #   info:       Information that does not require immediate attention,\
      \ but might be of interest\n        #   warn:       Something might be wrong\
      \ and it's probably worth looking into it\n        #   error:      An error\
      \ has occurred. Meaning something definitely is wrong\n        #   critical:\
      \   An error that cannot be recovered from\n        \n        self.log = gr.logger(self.alias())\
      \ # initialize logger\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n  \
      \      \n        # (max_unambiguous_range = c / (2 * prf) - at 30 kHz, unambiguous\
      \ to 5000 m, 3.1 mi)\n        #self.prf_khz = prf_khz # pulse repetition frequency\n\
      \        #self.pri_sec = pri_sec # pulse repetition interval - time per pulse\n\
      \        #self.duty_cycle = duty_cycle # amount of time spent transmitting within\
      \ a single pri\n        #self.time_bandwidth_product = time_bandwidth_product\
      \ # tau_sec * bandwidth_khz * 1e3\n        self.pulse_center_freq_hz=pulse_center_freq_hz\
      \ #center freq of the linearly-modulated pulse\n\n        self.tau_sec = tau_sec\
      \ # pulse duration\n\n        # calculate bandwidth using TBP and Tau. Check\
      \ resulting BW to ensure it's reasonable\n        self.bandwidth_khz = bandwidth_khz\n\
      \        #self.samp_rate = samp_rate # rate (Hz) the signal is sampled\n   \
      \     self.num_samples_per_pulse = num_samples_per_pulse\n\n        self.num_samples_during_pulse_tx\
      \ = num_samples_during_pulse_tx\n\n        #self.num_samples_during_pulse_silence\
      \ = num_samples_during_pulse_silence\n        \n        self.amplitude = amplitude\n\
      \n        if self.bandwidth_khz > bandwidth_khz_lower_limit or self.bandwidth_khz\
      \ < bandwidth_khz_upper_limit:\n            self.log.error(f\"Selected bandwidth:\
      \ {self.bandwidth_khz} kHz out of range\")\n\n        # create the LFM pulse.\
      \ Note that this is NOT a mathematical addition of two vectors, but a pythonic\
      \ contatenation\n        self.t = np.linspace(0, tau_sec, num=num_samples_during_pulse_tx,\
      \ endpoint=False)\n\n        self.lfm_waveform = np.zeros(num_samples_per_pulse,\
      \ dtype=np.complex64)\n        #self.lfm_waveform[0:self.num_samples_during_pulse_tx]\
      \ = np.complex64(self.amplitude * np.exp(1j * np.pi * self.bandwidth_khz * 1e3\
      \ / self.tau_sec * self.t))\n        \n        self.phase_ramp = np.pi * (bandwidth_khz\
      \ * 1e3) / self.tau_sec * np.square(self.t)\n        self.lfm_waveform[0:self.num_samples_during_pulse_tx]\
      \ = self.amplitude * np.cos(2 * np.pi * self.pulse_center_freq_hz * self.t +\
      \ self.phase_ramp)\n        \n        self.log.error(f\"t[10]: {self.t[10]}\"\
      )\n        self.log.error(f\"tau_sec: {self.tau_sec}\")\n        self.log.error(f\"\
      bandwidth_khz: {self.bandwidth_khz}\")\n        self.log.error(f\"phase_ramp[10]:\
      \ {self.phase_ramp[10]}\")\n        self.log.error(f\"pulse_center_freq_hz:\
      \ {self.pulse_center_freq_hz}\")\n        self.log.error(f\"lfm_waveform[10]:\
      \ {self.lfm_waveform[10]}\")\n        \n    \n    \"\"\"\n    Function:    work\n\
      \    Description: Takes inputted in-phase (I) and quadrature (Q) channels \n\
      \                 and performs linear frequency modulation (i.e., the first\
      \ step in pulse compression).\n                 Refer to p. 790\n    \"\"\"\n\
      \    def work(self, input_items, output_items):\n    \n        #output_items[0][:]\
      \ = np.linspace(0, num_samples_per_pulse)\n        output_items[0][:] = self.lfm_waveform\n\
      \n        return len(output_items[0])\n\n\n"
    affinity: ''
    alias: ''
    amplitude: amplitude
    bandwidth_khz: bandwidth_khz
    bandwidth_khz_lower_limit: bandwidth_khz_lower_limit
    bandwidth_khz_upper_limit: bandwidth_khz_upper_limit
    comment: ''
    duty_cycle: None
    maxoutbuf: '0'
    minoutbuf: '0'
    num_samples_during_pulse_silence: None
    num_samples_during_pulse_tx: num_samples_during_pulse_tx
    num_samples_per_pulse: num_samples_per_pulse
    phase_ramp: None
    prf_khz: None
    pri_sec: None
    pulse_center_freq_hz: pulse_center_freq_hz
    samp_rate: None
    t: None
    tau_sec: tau_sec
    time_bandwidth_product: None
  states:
    _io_cache: ('Linear Frequency Modulation', 'blk', [('prf_khz', '3'), ('pri_sec',
      '0.001'), ('duty_cycle', '0.06'), ('tau_sec', '0.01'), ('time_bandwidth_product',
      '100'), ('pulse_center_freq_hz', '500'), ('bandwidth_khz_lower_limit', '1'),
      ('bandwidth_khz_upper_limit', '100'), ('bandwidth_khz', '50'), ('num_samples_per_pulse',
      '128'), ('num_samples_during_pulse_tx', '100'), ('num_samples_during_pulse_silence',
      '122'), ('samp_rate', '100000.0'), ('t', 'array([0.    , 0.0001, 0.0002, 0.0003,
      0.0004, 0.0005, 0.0006, 0.0007,\n       0.0008, 0.0009, 0.001 , 0.0011, 0.0012,
      0.0013, 0.0014, 0.0015,\n       0.0016, 0.0017, 0.0018, 0.0019, 0.002 , 0.0021,
      0.0022, 0.0023,\n       0.0024, 0.0025, 0.0026, 0.0027, 0.0028, 0.0029, 0.003
      , 0.0031,\n       0.0032, 0.0033, 0.0034, 0.0035, 0.0036, 0.0037, 0.0038, 0.0039,\n       0.004
      , 0.0041, 0.0042, 0.0043, 0.0044, 0.0045, 0.0046, 0.0047,\n       0.0048, 0.0049,
      0.005 , 0.0051, 0.0052, 0.0053, 0.0054, 0.0055,\n       0.0056, 0.0057, 0.0058,
      0.0059, 0.006 , 0.0061, 0.0062, 0.0063,\n       0.0064, 0.0065, 0.0066, 0.0067,
      0.0068, 0.0069, 0.007 , 0.0071,\n       0.0072, 0.0073, 0.0074, 0.0075, 0.0076,
      0.0077, 0.0078, 0.0079,\n       0.008 , 0.0081, 0.0082, 0.0083, 0.0084, 0.0085,
      0.0086, 0.0087,\n       0.0088, 0.0089, 0.009 , 0.0091, 0.0092, 0.0093, 0.0094,
      0.0095,\n       0.0096, 0.0097, 0.0098, 0.0099])'), ('amplitude', '1.0'), ('phase_ramp',
      '1.0')], [], [('0', 'complex', 1024)], 'Embedded Python Block example - a simple
      multiply const', ['amplitude', 'bandwidth_khz', 'num_samples_during_pulse_tx',
      'num_samples_per_pulse', 'phase_ramp', 'pulse_center_freq_hz', 't', 'tau_sec'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 148.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, samp_rate=4.0e6):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Matched Filter',\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.log = gr.logger(self.alias()) # initialize\
      \ logger\n        self.samp_rate = samp_rate\n\n    def work(self, input_items,\
      \ output_items):\n        received_pulse = input_items[0]\n        \n      \
      \  t = np.linspace(0, self.samp_rate*len(received_pulse), num=len(signal), endpoint=False,\
      \ dtype=complex)\n        reference_signal = np.sin(t) # temporarily substitute\
      \ simple sin wave instead of matched filter\n        matched_filter_response\
      \ = np.conv(reference_signal, received_signal)\n        \n        output_items[0]\
      \ = matched_filter_response\n        \n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        #output_items[0][:] = input_items[0] * self.example_param\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('Matched Filter', 'blk', [('samp_rate', '4000000.0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', ['samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 636.0]
    rotation: 0
    state: disabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, \n     \
      \   c=3.00e8,\n        distance_to_target_m=100.0 * 1.0e3,\n        target_vel_mps=100.0\
      \ * 1.0e3,\n        lambda_m=2,\n        pri_sec=1.0/3.0e3,\n        samp_rate=4e6\n\
      \    ):  # only default arguments here\n        \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n    \
      \        self,\n            name='Target Injection',   # will show up in GRC\n\
      \            in_sig=[(np.complex64,1024*18)],\n            out_sig=[(np.complex64,1024*18)]\n\
      \        )\n        \n        self.log = gr.logger(self.alias())\n        \n\
      \        # set class member variables by input arguments\n        self.c = c\n\
      \        self.distance_to_target_m = distance_to_target_m        \n        self.target_vel_mps\
      \ = target_vel_mps\n        self.lambda_m = lambda_m\n        self.pri_sec =\
      \ pri_sec\n        self.samp_rate = samp_rate\n        \n        # calculate\
      \ range bin and doppler shift of target\n        self.num_samples_to_target\
      \ = self.distance_to_target_m * self.samp_rate / self.c\n\n        self.doppler_shift_hz\
      \ = 2 * self.target_vel_mps / self.lambda_m\n        \n        \n        \n\n\
      \    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        #self.log.info(f\"length of vector: {len(input_items[0])}\"\
      )\n        output_items[0][:] = input_items[0] * 1\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    c: c
    comment: ''
    distance_to_target_m: distance_to_target_m
    lambda_m: lambda_m
    maxoutbuf: '0'
    minoutbuf: '0'
    pri_sec: pri_sec
    samp_rate: samp_rate
    target_vel_mps: target_vel_mps
  states:
    _io_cache: ('Target Injection', 'blk', [('c', '300000000.0'), ('distance_to_target_m',
      '100000.0'), ('target_vel_mps', '100000.0'), ('lambda_m', '2'), ('pri_sec',
      '0.0003333333333333333'), ('samp_rate', '4000000.0')], [('0', 'complex', 18432)],
      [('0', 'complex', 18432)], 'Embedded Python Block example - a simple multiply
      const', ['c', 'distance_to_target_m', 'lambda_m', 'pri_sec', 'samp_rate', 'target_vel_mps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 196.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import signalSource
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 84.0]
    rotation: 0
    state: disabled
- name: import_1
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 84.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: 10e6
    comment: ''
    fc: prf_khz * 1e3
    fftsize: '2048'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"LFM Pulse"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'False'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 140.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: 10e6
    comment: ''
    fc: prf_khz * 1e3
    fftsize: '2048'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Sine Wave"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'False'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 652.0]
    rotation: 0
    state: disabled
- name: qtgui_sink_x_0_1
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: 10e6
    comment: ''
    fc: prf_khz * 1e3
    fftsize: '2048'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Single LFM Pulse"'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'False'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 516.0]
    rotation: 0
    state: disabled

connections:
- [analog_sig_source_x_0, '0', blocks_throttle_0_0, '0']
- [blocks_head_0, '0', qtgui_sink_x_0_1, '0']
- [blocks_stream_to_vector_0, '0', epy_block_3, '0']
- [blocks_throttle_0, '0', blocks_vector_to_stream_0_0, '0']
- [blocks_throttle_0_0, '0', epy_block_0, '0']
- [blocks_vector_to_stream_0, '0', blocks_head_0, '0']
- [blocks_vector_to_stream_0_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_vector_to_stream_0_0_0, '0', qtgui_sink_x_0, '0']
- [epy_block_0, '0', qtgui_sink_x_0_0, '0']
- [epy_block_1, '0', blocks_throttle_0, '0']
- [epy_block_3, '0', blocks_vector_to_stream_0_0_0, '0']

metadata:
  file_format: 1
